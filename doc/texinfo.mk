# texinfo.mk
# Copyright 2013, j8takagi.
# texinfo.mk is licensed under the MIT license.

# TEXITARGETS変数が設定されていない場合は、エラー終了
ifndef TEXITARGETS
  $(error "TEXITARGETS is not set.")
else
  $(foreach \
    f, $(TEXITARGETS), \
    $(if $(wildcard $(basename $f).texi),,$(error "$(basename $f).texi needed by $f is not exist.")) \
  )
endif

# DEBUGSH変数が設定されている場合は、デバッグ用にシェルコマンドの詳細が表示される
# 例: DEBUGSH=1 make
ifdef DEBUGSH
  SHELL := /bin/sh -x
endif

.PHONY: texi-texint-clean texi-clean texi-distclean

######################################################################
# シェルコマンドの定義
######################################################################
# TeX commands
DVIPDFMX := dvipdfmx
TEX := ptex

# TeX command option flags
DVIPDFMX_FLAGS :=

# Texinfo commands
# MAKEINFO := makeinfo    # set default in GNU Make
TEXI2DVI := TEX=$(TEX) texi2dvi

# Texinfo command option flags
# MAKEINFO_FLAGS :=
TEXI2DVI_FLAGS := -q --texinfo=@afourpaper

#General commands
CP := cp
INSTALL-INFO := install-info
MKDIR := mkdir
TEST := test
SED := sed
ECHO := echo

######################################################################
# 拡張子
######################################################################
TEXIINTEXT := .aux .cp .cps .fn .ky .log .pg .pgs .tmp .toc .tp .vr .t2d

OUTEXT := .info .dvi .pdf .html _html .txt .xml

######################################################################
# .dファイルの生成と読み込み
# .dファイルには、.texiファイルの依存関係が記述される
######################################################################
INCLUDEFILES = $(INCLUDEFILESre)

INCLUDEFILESre = $(eval INCLUDEFILES := \
  $(shell \
    $(SED) -e "s/@c .*$$//" -e "s/@comment .*$$//" $< | \
      $(SED) -e "s/@verb{\[^}\]*}//g" | \
      $(SED) -e "/^@verbatim /,/^@end verbatim$$/d" | \
      $(SED) -n -e "s/@include \(.*\)$$/\1/p" \
  ))

INCLUDEVERBATIMFILES = $(INCLUDEVERBATIMFILESre)

INCLUDEVERBATIMFILESre = $(eval INCLUDEVERBATIMFILES := \
  $(shell \
    $(SED) -e "s/@c .*$$//" -e "s/@comment .*$$//" $< $(INCLUDEFILES) | \
      $(SED) -e "s/@verb{\[^}\]*}//g" | \
      $(SED) -e "/^@verbatim /,/^@end verbatim$$/d" | \
      $(SED) -n -e "s/^@verbatiminclude \(.*\)$$/\1/p" \
  ))

INCLUDEGRAPHICSFILES = $(INCLUDEGRAPHICSFILESre)

INCLUDEGRAPHICSFILESre = $(eval INCLUDEGRAPHICSFILES := \
  $(shell \
    $(SED) -e "s/@c .*$$//" -e "s/@comment .*$$//" $< $(INCLUDEFILES) | \
      $(SED) -e "s/@verb{\[^}\]*}//g" | \
      $(SED) -e "/@verbatim/,/@end verbatim/d" | \
      $(SED) -e "s/}/}%/g; y/}%/}\n/" | \
      $(SED) -n -e "s/.*@includegraphics{\(.*\)}$$/\1/p" \
  ))

# 出力されるファイル群
OUTFILES = $(addprefix $(basename $<),$(OUTEXT))

# 出力されるファイル群で、グラフィックを挿入できるもの
OUTGFILES = $(filter-out %.tex %.info,$(OUTFILES))

# .dファイルを作成するパターンルール
%.d: %.texi
    # Makefile変数の展開
    # 遅延展開される変数の展開。実際の表示はしない
	@$(foreach f, INCLUDEFILES INCLUDEVERBATIMFILES INCLUDEGRAPHICSFILES, $(ECHO) '$f=$($f)' >/dev/null; )
    # .dファイルに書き込まれる変数をコマンドラインへ出力
	@$(if $(strip $(INCLUDEFILES) $(INCLUDEVERBATIMFILES) $(INCLUDEGRAPHICSFILES)), \
      $(ECHO) 'Makefile variables'; \
      $(foreach f, INCLUDEFILES INCLUDEVERBATIMFILES INCLUDEGRAPHICSFILES, $(if $($f),$(ECHO) '  $f=$($f)'; )) \
    )
    # ターゲットファイル（.dファイル）を作成し、自身の依存関係を出力
	@$(ECHO) '$(OUTFILES) $@: $<' >$@
    # @includeで挿入したファイルがある場合、依存関係をターゲットファイルへ出力
	@$(if $(INCLUDEFILES),($(ECHO); $(ECHO) '$(OUTFILES): $(INCLUDEFILES)') >>@)
    # @includeverbatimで挿入したファイルがある場合、依存関係をターゲットファイルへ出力
	@$(if $(INCLUDEVERBATIMFILES),($(ECHO); $(ECHO) '$(OUTFILES): $(INCLUDEVERBATIMFILES)') >>$@)
    # @includegraphicsで挿入したファイルがある場合、依存関係をターゲットファイルへ出力
	@$(if $(INCLUDEGRAPHICFILES),($(ECHO); $(ECHO) '$(OUTGFILES): $(INCLUDEGRAPHICFILES)') >>$@)
    # ターゲットファイルが作成されたことをコマンドラインへ出力
	@$(ECHO) '$@ is generated by scanning $(strip $< $(INCLUDEFILES)).'

# .dファイルをインクルードし、依存関係を取得する
# ターゲット末尾に cleanが含まれている場合は除く
ifeq (,$(filter %clean %.d,$(MAKECMDGOALS)))
  -include $(addsuffix .d,$(sort $(basename $(TEXITARGETS))))
endif

######################################################################
# 各種形式のドキュメントを生成するパターンルール
######################################################################
# ソース -> Info
%.info: %.texi
	$(MAKEINFO) $(MAKEINFO_FLAGS) -o $@ $<

# ソース -> HTML（1ファイル）
%.html: %.texi
	$(MAKEINFO) $(MAKEINFO_FLAGS) -o $@ --no-split --html --css-include=$(CSS) $<

# ソース -> HTML（複数ファイル）
# 「<texiファイル名の拡張子以外の部分>_html」ディレクトリーに格納
%_html: %.texi
	if $(TEST) ! -e $@; then $(MKDIR) $@; fi
	$(CP) $(CSS) $@/
	$(MAKEINFO) $(MAKEINFO_FLAGS) -o $@ --html --css-ref=$(CSS) $<

# DVI -> PDF
# なお、ソース -> DVI はGNU Make標準で設定されている
%.pdf: %.dvi
	$(DVIPDFMX) $(DVIPDFMXFLAGS) $<

# ソース -> テキストファイル
%.txt: %.texi
	$(MAKEINFO) $(MAKEINFO_FLAGS) --no-headers --disable-encoding -o $@ $<

# ソース -> Docbook（XML）
%.xml: %.texi
	@$(MAKEINFO) $(MAKEINFO_FLAGS) --docbook -o $@ $<

######################################################################
# ターゲット
######################################################################
# 警告
texi-warn:
	@$(ECHO) "Check current directory, or target of Makefile." >&2; exit 2

texi-texint-clean:
	$(RM) $(addprefix *,$(TEXIINTEXT))

texi-clean: texi-texint-clean
	$(RM) *.d

texi-distclean: texi-clean
	$(RM) -r $(foreach f,$(sort $(basename $(TEXITARGETS))),$(addprefix $f,$(OUTEXT)))
