\input texinfo    @c -*-texinfo-*-
@c %**start of header
@ifnottex
@documentlanguage ja_JP
@end ifnottex
@setfilename tex_mk.info
@documentencoding UTF-8
@settitle tex.mk - .texファイルからのPDF作成を自動化
@firstparagraphindent insert
@paragraphindent 1
@ifhtml
@exampleindent 0
@end ifhtml
@c %**end of header

@copying
Copyright @copyright{} 2013 j8takagi
@end copying

@dircategory Basics
@direntry
* tex.mk: (tex_mk).
@end direntry

@titlepage
@title tex.mk
@subtitle .texファイルからのPDF作成を自動化
@author j8takagi
@insertcopying
@end titlepage

@node Top, About, (dir), (dir)
@menu
* About::
* Usage::
* Settings::
@end menu

@contents

@node About, Usage, Top, Top
@chapter 概要

@cindex @file{tex.mk}
@cindex @TeX {}
@cindex @LaTeX {}
@cindex GNU Make
@cindex @command{make}
@cindex 画像
@cindex @command{\input}
@cindex @command{\include}
@cindex 目次
@cindex 画像リスト
@cindex 表リスト
@cindex 索引
@cindex BiBTeX
@cindex 文献リスト

tex.mkは、 @TeX{} および@LaTeX{} でのドキュメント作成時に必要な、@file{.tex}ファイルからPDFなどを生成する作業を自動化するためのツールです。tex.mkは、GNU Make スクリプトとして実装されています。

tex.mkが設定されている場合、@file{.tex}ファイルがあるディレクトリーで@command{make} コマンドを実行するだけで@TeX{} ドキュメントが生成されます。また、tex.mkは次のような@TeX{} ドキュメントに対応しています。

@itemize
@item
画像を含むドキュメント

@item
@command{\input}や@command{\include}命令により、別の@LaTeX{} ドキュメントが挿入された@LaTeX{} ドキュメント

@item
目次や画像リスト・表リストを含む@LaTeX{} ドキュメント

@item
索引を含む@LaTeX{} ドキュメント

@item
BiBTeX で作成する文献リストを含む@LaTeX{} ドキュメント
@end itemize

@node Usage, Settings, About, Top
@chapter 基本的な使い方

@menu
* Environment::
* Creation::
* Clean::
* Sample::
@end menu

@node Environment, Creation, Usage, Usage
@section 動作環境

@subsection OS
@cindex OS
@cindex UNIX
@cindex 動作環境
@cindex Mac OS X
@cindex Linux
@cindex Ubuntu Linux 12.04
@cindex Mac OS X Marvericks

動作環境は、LinuxやMac OS XなどのUNIX系のOSを想定しています。現在、Ubuntu Linux 12.04 と Mac OS X Marvericks で動作を確認しています。

@subsection ツール
@cindex GNU Make
@cindex sed
@cindex Linux
@cindex Mac OS X
@cindex XCode
@cindex コマンドラインツール

GNU Makeと、sedなどUNIX系OS用のコマンドツールが必要です。Linuxでは多くの場合、初期状態で必要なツールがインストールされています。Mac OS X では、XCodeのコマンドラインツールをインストールすることで、GNU Makeがインストールされます。なお、Makefile以外のコマンドツールは、GNU版以外でも動作します。

@node Creation, Clean, Environment, Usage
@section PDFの作成
@cindex PDF
@cindex @file{Makefile.template}
@cindex @file{Makefile}

tex.mkを使ってPDFファイルを作成する手順は次のとおりです。

@enumerate
@item
パッケージ内にある@file{tex.mk} ファイルを、@file{.tex} ソースファイルと同じディレクトリーにコピー

@item
@file{.tex} ソースファイルと同じディレクトリーに @file{Makefile} ファイルを作成 @*
パッケージ内にある@file{Makefile.template} ファイルをコピーして@file{Makefile}を作成することもできます。

@item
@file{.tex} ソースファイルのディレクトリーで、@file{make} を実行
@end enumerate

@subsection 中間ファイル
@cindex 中間ファイル

PDFファイルを生成する場合は、@TeX{} の中間ファイル（@file{.aux}や@file{.toc}、@file{.out}）とともに、tex.mkによる中間ファイル（@file{report.d}や@file{report.toc_prev}、@file{report.out_prev}）が生成されます。

これらの中間ファイルを削除せず残しておけば、次回@file{report.tex} を変更して@file{make}を実行するときの実行時間を短縮できます。
削除しても、中間ファイルは再度@file{make} を実行すると再作成されるので、PDFなどを正常に作成できなくなることはありません。

@subsection 例

たとえば、@file{~/Download/tex_mk} ディレクトリーに@file{tex.mk}のパッケージ一式があり、@file{~/sample} ディレクトリーに@file{report.tex} ファイルを作成している場合、次の手順で@file{report.pdf} を生成できます。

@enumerate
@item @file{tex.mk} ファイルを、@file{~/sample} ディレクトリーにコピー
@example
$ @kbd{cd ~/Download/tex_mk}
$ @kbd{cp tex.mk ~/sample/}
@end example

@item @file{~/sample} ディレクトリーに、@file{Makefile.template} ファイルを @file{Makefile} としてコピー
@example
$ @kbd{cp Makefile.template ~/sample/Makefile}
@end example

@item @file{~/sample} ディレクトリーで、@file{make} コマンドを実行
@example
$ @kbd{cd ~/sample}
$ @kbd{make}
report.fls is generated.
Makefile variables
  TEXINTFILES=report.out report.toc
report.d is generated by scanning report.tex and report.fls.
platex -interaction=batchmode report.tex
`report.out' -> `report.out_prev'
`report.toc' -> `report.toc_prev'
platex -interaction=batchmode report.tex
dvipdfmx report.dvi
@end example
@end enumerate

@node Clean, Sample, Creation, Usage
@section 不要ファイルの削除

@cindex 不要ファイル
@cindex 削除

@subsection 中間ファイルの削除

@cindex 中間ファイル
@cindex 削除

@file{make}で生成された中間ファイルを削除するには、次の@file{make}コマンドを実行します。

@example
$ @kbd{make tex-clean}
@end example

@file{Makefile.template} をコピーして@file{Makefile}を作成するなど@file{Makefile}で設定されている場合は、@file{make tex-clean} のかわりに @file{make clean} を実行することができます。

@subsection PDFの削除

@cindex PDF
@cindex 削除

PDFファイルも含めて@file{make}で生成されたすべてのファイルを削除するには、次の@file{make}コマンドを実行します。

@example
$ @kbd{make tex-distclean}
@end example

@file{Makefile.template} をコピーして@file{Makefile}を作成していた場合は、@file{make tex-distclean} のかわりに @file{make distclean} を実行することができます。

@node Sample,  , Clean, Usage
@section サンプル
@cindex サンプル
@cindex @file{sample}ディレクトリー

パッケージの @file{sample}ディレクトリーの中にある各ディレクトリーに、tex.mk で処理可能な@file{.tex}サンプルファイルを
格納しています。

@node Settings,  , Usage, Top
@chapter 設定
@cindex @file{Makefile}
@cindex @file{Makefile.template}
@cindex @command{\include}
@cindex @command{\input}

tex.mkを使うための設定は基本的に、@file{Makefile} ファイルで行います。@file{Makefile.template} をコピーして@file{Makefile}を作成した場合、@file{Makefile}は次の内容になります。

@example
@verbatiminclude ../Makefile.template
@end example

多くの場合、この@file{Makefile}でPDFを正常に生成できます。ただし、次のような場合は @file{Makefile} で設定を変更する必要があります。
@itemize
@item
@file{.tex}ファイルの中で@command{\include} や @command{\input} 命令を使って、同じディレクトリーにある別の@file{.tex}ファイルを挿入している

@item
初期設定以外の@TeX{}コマンドを使う
@end itemize

@menu
* Targets::
* Commands::
@end menu

@node Targets, Commands, Settings, Settings
@section ターゲットの設定
tex.mkを使う場合、@TeX{} 処理の直接のターゲットとなる@file{.tex}ファイルは、@var{Makefile} 内の変数 @var{TEXTARGETS} で設定します。@var{TEXTARGETS} の初期設定は次のようになっています。

@example
TEXMAIN := *
TEXTARGETS := $(subst .tex,.pdf,$(wildcard $(TEXMAIN).tex))
@end example

この設定では、ワイルドカード（@file{*}）を用いて、ディレクトリー内に実在するすべての
@file{.tex}ファイルに対する@file{.pdf}ファイルを @var{TEXTARGETS} に指定しています。
設定を変更する場合は、この部分で作成する@file{.pdf}ファイルの名前を指定します。
たとえば、@file{report.tex} から @file{report.pdf} を作成する場合、
@var{TEXTARGETS} について次のように記述します。

@example
@kbd{TEXMAIN := report}
TEXTARGETS := $(subst .tex,.pdf,$(wildcard $(TEXMAIN).tex))
@end example

次のように、生成されるファイルを直接@var{TEXTARGETS} に設定することもできます。
@var{TEXTARGETS} を直接設定する場合は、@file{.pdf} など作成するファイルの拡張子までを含めたファイル名を指定してください。

@example
@kbd{TEXTARGETS := report.pdf}
@end example

複数のファイルを@var{TEXTARGETS} に記述することもできます。たとえば同じディレクトリー内で、@file{report1.tex} から @file{report1.pdf}を、@file{report2.tex} から @file{report2.pdf} を作成する場合、次のどちらかを記述します。

@example
@kbd{TEXMAIN := report1 report2}
TEXTARGETS := $(subst .tex,.pdf,$(wildcard $(TEXMAIN).tex))
@end example

または、

@example
@kbd{TEXTARGETS := report1.pdf report2.pdf}
@end example

@node Commands,  , Targets, Settings
@section @TeX{} コマンドの設定
@TeX{} コマンドは、初期状態では@file{tex.mk}で次のように設定されています。

@example
@verbatiminclude commands.texi
@end example

これらのコマンドは、@file{Makefile}で@code{include tex.mk}の後に記述を追加することで変更できます。たとえば、@command{platex} ではなく @command{uplatex}を使って@file{report.pdf}を作成する場合は、@file{Makefile}を次の内容にします。

@example
TEXTARGETS := report.pdf

.PHONY: all clean distclean

all: $(TEXTARGETS)

include tex.mk

@kbd{TEX := uplatex}

clean: tex-clean

distclean: clean tex-distclean
@end example

@iftex
@appendix 索引

@printindex cp
@end iftex

@bye
